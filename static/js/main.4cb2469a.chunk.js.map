{"version":3,"sources":["utils/logger.js","helpers/genericHelpers.js","reducers/tasksReducer/actions.js","reducers/tasksReducer/tasksReducer.js","helpers/subTaskHelpers.js","reducers/subTasksReducer/actions.js","reducers/subTasksReducer/subTasksReducer.js","reducers/appReducer/actions.js","reducers/appReducer/appReducer.js","store/rootReducer.js","utils/storage.js","utils/delay.js","api/config.js","api/utils.js","api/tasks/createTask.js","api/tasks/fetchTasks.js","api/tasks/deleteTask.js","api/tasks/findTasks.js","reducers/subTasksReducer/selectors.js","reducers/appReducer/selectors.js","sagas/tasksSaga.js","api/subTasks/deleteSubTask.js","api/subTasks/fetchSubTasks.js","api/subTasks/findSubTasks.js","api/subTasks/findSubTasksByLabel.js","sagas/subTasksSaga.js","store/index.js","store/rootSaga.js","config/routes.js","components/templates/Default/Default.styles.js","components/templates/Default/Default.js","components/atoms/Button/Button.styles.js","components/atoms/Button/Button.js","constants/tasksConstants.js","components/atoms/SortButton/SortButton.styles.js","components/atoms/SortButton/SortButton.js","components/atoms/TextInput/TextInput.styles.js","components/atoms/TextInput/TextInput.js","components/atoms/PageHeader/PageHeader.js","components/atoms/List/List.styles.js","components/atoms/List/List.js","components/atoms/Checkbox/Checkbox.styles.js","components/atoms/Checkbox/Checkbox.js","components/atoms/MarkedText/MarkedText.js","components/atoms/Label/Label.styles.js","components/atoms/Label/Label.js","components/atoms/ToggleButton/ToggleButton.js","components/hooks/useParametrizedSelector.js","components/molecules/SubTask/SubTask.js","components/molecules/SortTasksButtons/SortTasksButtons.styles.js","components/molecules/SortTasksButtons/SortTasksButtons.js","components/molecules/LabelsList/LabelsList.styles.js","components/molecules/LabelsList/LabelsList.js","components/organisms/SubTasksList/SubTasksList.js","helpers/tasksHelpers.js","components/organisms/Task/Task.styles.js","components/organisms/Task/Task.js","reducers/tasksReducer/selectors.js","components/organisms/TaskList/hooks/useSorting.js","components/organisms/TaskList/TaskList.js","components/organisms/FiltersPanel/FiltersPanel.js","components/organisms/TaskForm/TaskForm.styles.js","components/organisms/TaskForm/TaskForm.js","modules/Tasks/Tasks.js","routes/Home/Home.js","routes/NotFound/NotFound.js","routes/index.js","styles.js","App.js","index.js"],"names":["logFunction","window","alert","logError","args","join","removeById","array","id","filter","item","uniques","Set","tasksSetAction","createAction","taskCreateAction","tasksFetchAction","taskDeleteSucceedAction","tasksReducer","createReducer","tasksList","builder","addCase","state","payload","removedTaskId","subTasksFetchAction","subTasksSetAction","setSubTasksOfTaskAction","subTaskDeleteAction","subTaskDeleteSucceedAction","subTasksReducer","allSubTasks","taskId","subTasks","subTasksList","reduce","groupedSubTasks","subTask","push","removedSubTaskId","setAppModeAction","searchItemsAction","searchItemsByLabelAction","appReducer","isSearchMode","searchQuery","filters","label","history","createBrowserHistory","reducer","combineReducers","router","connectRouter","tasks","app","Storage","constructor","key","this","localStorage","getItem","setItem","JSON","stringify","get","parse","set","value","callback","Promise","resolve","setTimeout","labels","Array","from","length","map","faker","lorem","word","getRandomNumber","min","max","Math","floor","random","logRequest","requestName","func","result","console","log","delay","title","task","datatype","uuid","createTime","Date","now","sentence","subTaskList","allTasks","targetTask","some","Error","lowerCasedTitle","toLowerCase","includes","createSubTasksByTaskIdSelector","isSearchModeSelector","searchQuerySelector","filtersSelector","fetchTasksSaga","call","fetchTasks","put","findTasksSaga","select","findTasks","createTaskSaga","newTask","createTask","deleteTaskSaga","deleteTask","error","deleteEmptyTaskSaga","subTaskId","isLastSubTask","watchTasksActions","takeLatest","type","takeEvery","find","t","st","lowerSearchQuery","searchLabels","filteredSubTasks","searchLabel","lowerCasedLabel","fetchSubTasksSaga","fetchSubTasks","findSubTasksSaga","findSubTasks","findSubTasksByLabelSaga","findSubTasksByLabel","deleteSubTaskSaga","deleteSubTask","watchSubTasksActions","routerMiddleware","createRouterMiddleware","sagaMiddleware","createSagaMiddleware","onError","sagaStack","middlewares","getDefaultMiddleware","thunk","serializableCheck","immutableCheck","warnAfter","store","configureStore","rootReducer","middleware","enhancers","preloadedState","devTools","trace","run","all","routes","BorderedCenterArea","styled","div","Default","children","Wrapper","button","Button","props","SortTypes","CREATE_TIME","TITLE","SortButton","SortButtonTitles","sortType","sortBy","onSortClick","useCallback","className","onClick","Input","input","attrs","TextInput","initialValue","placeholder","onValueChange","setValue","useState","handleTextInputChange","event","target","useEffect","onChange","defaultProps","Header","ListContainter","ul","List","items","ItemComponent","Checkbox","onCheck","isUncheckable","isChecked","setChecked","onCheckClick","checkedState","checked","MarkedText","text","useSelector","queryRegex","RegExp","parts","split","part","index","isQueryPart","test","Fragment","LabelStyled","Label","dispatch","useDispatch","handleClick","ToggleButton","onToggle","onTitle","offTitle","isToggled","setState","toggle","isOn","SubTask","onRemoveClick","PropTypes","string","isRequired","arrayOf","ButtonContainer","SortTasksButtons","Object","values","LabelsListContainer","LabelListItem","li","LabelsList","SubTasksList","isExpanded","isExpandedByButton","parametrizedSelectorFactory","params","selector","useParametrizedSelector","shouldShowList","formatTimeForRender","timeInMilliseconds","date","toLocaleDateString","toLocaleTimeString","TaskWrapper","TaskName","span","number","Task","isSubTasksListExpanded","setSubTasksListExpanded","onToggleExpand","tasksListSelector","comparatorsBySortType","a","b","useSorting","setSortType","sortedItems","sort","sortItemsImmutably","TasksList","FiltersPanel","TaskFormContainer","section","TaskForm","initialTitle","setTitle","onCreate","onToggleSearchMode","onTitleChange","TasksPage","PageHeader","TaskList","Home","Tasks","NotFound","to","Routes","path","component","createGlobalStyle","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4cb2469a.chunk.js","sourcesContent":["// eslint-disable-next-line no-console\nconst logFunction = window.alert; // console.error;   - for development from Tablet purpose only\n\nexport const logError = (...args) => {\n  logFunction(args.join(' '));\n};\n","export const removeById = (array, id) => array.filter(item => item.id !== id);\n\nexport const uniques = (...array) => [...new Set(array)];\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const tasksSetAction = createAction('tasks/set');\nexport const taskCreateAction = createAction('task/create');\nexport const tasksFetchAction = createAction('tasks/fetch');\nexport const taskDeleteSucceedAction = createAction('task/delete/success');\n","import { createReducer } from '@reduxjs/toolkit';\nimport { removeById } from 'helpers/genericHelpers';\nimport { logError } from 'utils/logger';\nimport { tasksSetAction, taskDeleteSucceedAction } from './actions';\n\nconst initialTasksState = {\n  tasksList: [],\n};\n\nconst tasksReducer = createReducer(initialTasksState, builder => {\n  builder\n    .addCase(tasksSetAction, (state, { payload: tasksList }) => ({\n      ...state,\n      tasksList: logError(tasksList, state) || tasksList,\n    }))\n    .addCase(taskDeleteSucceedAction, (state, { payload: removedTaskId }) => ({\n      ...state,\n      tasksList: removeById(state.tasksList, removedTaskId),\n    }));\n});\n\nexport default tasksReducer;\n","export const isLastSubTask = (subTaskId, subTasksList) =>\n  !subTasksList.length ||\n  (subTasksList.length === 1 && subTasksList.some(({ id }) => id === subTaskId));\n\nexport const groupSubTasksByTask = subTasksList =>\n  subTasksList.reduce((groupedSubTasks, subTask) => {\n    // eslint-disable-next-line no-param-reassign\n    groupedSubTasks[subTask.taskId] = groupedSubTasks[subTask.taskId] || [];\n    groupedSubTasks[subTask.taskId].push(subTask);\n\n    return groupedSubTasks;\n  }, {});\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const subTasksFetchAction = createAction('subTasks/fetch');\nexport const subTasksSetAction = createAction('subTasks/set');\nexport const setSubTasksOfTaskAction = createAction('subTasks/set:taskId');\nexport const subTaskDeleteAction = createAction('subTask/delete');\nexport const subTaskDeleteSucceedAction = createAction('subTask/delete/success');\n","import { createReducer } from '@reduxjs/toolkit';\nimport { removeById } from 'helpers/genericHelpers';\nimport { groupSubTasksByTask } from 'helpers/subTaskHelpers';\nimport { subTasksSetAction, setSubTasksOfTaskAction, subTaskDeleteSucceedAction } from './actions';\n\nconst initialTasksState = {\n  allSubTasks: {},\n};\n\nconst subTasksReducer = createReducer(initialTasksState, builder => {\n  builder\n    .addCase(setSubTasksOfTaskAction, (state, { payload: { taskId, subTasks } }) => ({\n      ...state,\n      allSubTasks: {\n        ...state.allSubTasks,\n        [taskId]: subTasks,\n      },\n    }))\n    .addCase(subTasksSetAction, (state, { payload: subTasks }) => ({\n      ...state,\n      allSubTasks: groupSubTasksByTask(subTasks),\n    }))\n    .addCase(\n      subTaskDeleteSucceedAction,\n      (state, { payload: { id: removedSubTaskId, taskId } }) => ({\n        ...state,\n        allSubTasks: {\n          ...state.allSubTasks,\n          [taskId]: removeById(state.allSubTasks[taskId], removedSubTaskId),\n        },\n      }),\n    );\n});\n\nexport default subTasksReducer;\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const setAppModeAction = createAction('app/mode');\nexport const searchItemsAction = createAction('app/searchItems');\nexport const searchItemsByLabelAction = createAction('app/searchItems:byLabel');\n","import { createReducer } from '@reduxjs/toolkit';\nimport { uniques } from 'helpers/genericHelpers';\nimport { setAppModeAction, searchItemsAction, searchItemsByLabelAction } from './actions';\n\nconst initialTasksState = {\n  isSearchMode: false,\n  searchQuery: '',\n  filters: [],\n};\n\nconst appReducer = createReducer(initialTasksState, builder => {\n  builder\n    .addCase(searchItemsByLabelAction, (state, { payload: label }) => ({\n      ...state,\n      isSearchMode: true,\n      searchQuery: '',\n      filters: uniques(...state.filters, label),\n    }))\n    .addCase(setAppModeAction, (state, { payload: isSearchMode }) => ({\n      ...state,\n      isSearchMode,\n      searchQuery: isSearchMode ? state.searchQuery : '',\n      filters: isSearchMode ? state.filters : [],\n    }))\n    .addCase(searchItemsAction, (state, { payload: searchQuery }) => ({\n      ...state,\n      searchQuery,\n    }));\n});\n\nexport default appReducer;\n","import { createBrowserHistory } from 'history';\nimport { combineReducers } from '@reduxjs/toolkit';\nimport { connectRouter } from 'connected-react-router';\nimport { tasksReducer, subTasksReducer, appReducer } from 'reducers';\n\nconst history = createBrowserHistory();\n\nconst reducer = combineReducers({\n  router: connectRouter(history),\n  tasks: tasksReducer,\n  subTasks: subTasksReducer,\n  app: appReducer,\n});\n\nexport { history };\n\nexport default reducer;\n","class Storage {\n  key = null\n\n  constructor(key) {\n    this.key = key\n    if (!localStorage.getItem(this.key)) localStorage.setItem(this.key, JSON.stringify([]))\n  }\n\n  get() {\n    try {\n      return JSON.parse(localStorage.getItem(this.key))\n    } catch {\n      return null\n    }\n  }\n\n  set(value) {\n    localStorage.setItem(this.key, JSON.stringify(value))\n  }\n}\n\nexport default {\n  tasks: new Storage('tasks'),\n  subTasks: new Storage('subTasks'),\n}\n","export default callback =>\n  (...args) =>\n    new Promise(resolve => setTimeout(() => resolve(callback(...args)), 1500))\n","import faker from 'faker'\n\nexport const labels = Array.from({ length: 10 }).map(() => faker.lorem.word())\n","export const getRandomNumber = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nexport const logRequest =\n  (requestName, func) =>\n  (...args) => {\n    const result = func(...args);\n\n    // eslint-disable-next-line no-console\n    console.log('Request', requestName, 'args', args, 'result', result);\n\n    return result;\n  };\n","import faker from 'faker';\nimport Storage from 'utils/storage';\nimport delay from 'utils/delay';\nimport { labels } from '../config';\nimport { getRandomNumber } from '../utils';\n\nexport default delay(({ title }) => {\n  const tasks = Storage.tasks.get();\n  const subTasks = Storage.subTasks.get();\n  const task = {\n    id: faker.datatype.uuid(),\n    createTime: Date.now(),\n    title: title || faker.lorem.sentence(),\n  };\n  const subTaskList = Array.from({ length: getRandomNumber(1, 10) }).map(() => ({\n    id: faker.datatype.uuid(),\n    taskId: task.id,\n    title: faker.lorem.sentence(),\n    labels: [\n      ...new Set(\n        Array.from({ length: getRandomNumber(1, 5) }).map(() => labels[getRandomNumber(0, 9)]),\n      ),\n    ],\n  }));\n\n  Storage.tasks.set([...tasks, task]);\n  Storage.subTasks.set([...subTasks, ...subTaskList]);\n\n  return task;\n});\n","import Storage from 'utils/storage'\nimport delay from 'utils/delay'\n\nexport default delay(() => Storage.tasks.get())\n","import Storage from 'utils/storage';\nimport delay from 'utils/delay';\nimport { logRequest } from 'api/utils';\n\nexport default delay(\n  logRequest('deleteTask', taskId => {\n    const allTasks = Storage.tasks.get();\n    const targetTask = allTasks.some(task => task.id === taskId);\n\n    if (!targetTask) {\n      throw new Error(`Task ${taskId} wasn't found`);\n    }\n\n    Storage.tasks.set([...allTasks.filter(task => task.id !== taskId)]);\n\n    return targetTask;\n  }),\n);\n","import Storage from 'utils/storage';\nimport delay from 'utils/delay';\nimport { logRequest } from 'api/utils';\n\nexport default delay(\n  logRequest('findTasks', title => {\n    const allTasks = Storage.tasks.get();\n    const lowerCasedTitle = title.toLowerCase();\n\n    return allTasks.filter(task => task.title.toLowerCase().includes(lowerCasedTitle));\n  }),\n);\n","export const createSubTasksByTaskIdSelector = taskId => state =>\n  state.subTasks.allSubTasks[taskId] || [];\n","export const isSearchModeSelector = state => state.app.isSearchMode;\n\nexport const searchQuerySelector = state => state.app.searchQuery;\n\nexport const filtersSelector = state => state.app.filters;\n","import { put, takeEvery, takeLatest, call, select } from 'redux-saga/effects';\nimport { fetchTasks, createTask, deleteTask, findTasks } from 'api/tasks';\nimport {\n  tasksFetchAction,\n  tasksSetAction,\n  taskCreateAction,\n  taskDeleteSucceedAction,\n} from 'reducers/tasksReducer/actions';\nimport { searchItemsAction } from 'reducers/appReducer/actions';\nimport { subTaskDeleteSucceedAction } from 'reducers/subTasksReducer/actions';\nimport { createSubTasksByTaskIdSelector } from 'reducers/subTasksReducer/selectors';\nimport { searchQuerySelector } from 'reducers/appReducer/selectors';\nimport { isLastSubTask } from 'helpers/subTaskHelpers';\nimport { logError } from 'utils/logger';\n\nexport function* fetchTasksSaga() {\n  const tasks = yield call(fetchTasks);\n\n  logError(tasks);\n  yield put(tasksSetAction(tasks));\n}\n\nexport function* findTasksSaga() {\n  const searchQuery = yield select(searchQuerySelector);\n\n  if (searchQuery) {\n    const tasks = yield call(findTasks, searchQuery);\n\n    yield put(tasksSetAction(tasks));\n  }\n}\n\nexport function* createTaskSaga({ payload: newTask }) {\n  yield call(createTask, newTask);\n  yield call(fetchTasksSaga);\n}\n\nexport function* deleteTaskSaga({ payload: taskId }) {\n  try {\n    yield call(deleteTask, taskId);\n    // on success\n    yield put(taskDeleteSucceedAction(taskId));\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    logError('Delete task failed:', error);\n  }\n}\n\nexport function* deleteEmptyTaskSaga({ payload: subTask }) {\n  const { taskId, id: subTaskId } = subTask;\n  const subTasksList = yield select(createSubTasksByTaskIdSelector, taskId);\n\n  if (isLastSubTask(subTaskId, subTasksList)) {\n    yield call(deleteTaskSaga, { payload: taskId });\n  }\n}\n\nexport function* watchTasksActions() {\n  yield takeLatest(tasksFetchAction.type, fetchTasksSaga);\n  yield takeEvery(taskCreateAction.type, createTaskSaga);\n  yield takeLatest(searchItemsAction.type, findTasksSaga);\n  yield takeEvery(subTaskDeleteSucceedAction.type, deleteEmptyTaskSaga);\n}\n","import Storage from 'utils/storage';\nimport delay from 'utils/delay';\nimport { logRequest } from 'api/utils';\n\nexport default delay(\n  logRequest('deleteSubTask', subTaskId => {\n    const subTasks = Storage.subTasks.get();\n    const subTask = subTasks.find(t => t.id === subTaskId);\n\n    if (subTask) {\n      Storage.subTasks.set(subTasks.filter(st => st.id !== subTaskId));\n\n      return subTask;\n    }\n\n    throw new Error(`SubTask [${subTaskId}] not found`);\n  }),\n);\n","import Storage from 'utils/storage'\nimport delay from 'utils/delay'\n\nexport default delay(taskId => {\n  const subTasks = Storage.subTasks.get()\n\n  return subTasks.filter(subTask => subTask.taskId === taskId)\n})\n","import Storage from 'utils/storage';\nimport delay from 'utils/delay';\nimport { logRequest } from 'api/utils';\n\nexport default delay(\n  logRequest('findSubTasks', searchQuery => {\n    const subTasks = Storage.subTasks.get();\n\n    if (!searchQuery) return [];\n\n    const lowerSearchQuery = searchQuery.toLowerCase();\n\n    return subTasks.filter(subTask => subTask.searchQuery.toLowerCase().includes(lowerSearchQuery));\n  }),\n);\n","import Storage from 'utils/storage';\nimport delay from 'utils/delay';\nimport { logRequest } from 'api/utils';\n\nexport default delay(\n  logRequest('findSubTasksByLabel', searchLabels => {\n    const subTasks = Storage.subTasks.get();\n\n    return searchLabels.reduce((filteredSubTasks, searchLabel) => {\n      const lowerCasedLabel = searchLabel.toLowerCase();\n\n      return filteredSubTasks.filter(subTask =>\n        subTask.labels.some(label => label.toLowerCase() === lowerCasedLabel),\n      );\n    }, subTasks);\n  }),\n);\n","import { put, takeEvery, call, takeLatest, select } from 'redux-saga/effects';\nimport { fetchSubTasks, deleteSubTask, findSubTasks, findSubTasksByLabel } from 'api/subTasks';\nimport {\n  subTasksFetchAction,\n  subTasksSetAction,\n  subTaskDeleteAction,\n  subTaskDeleteSucceedAction,\n  setSubTasksOfTaskAction,\n} from 'reducers/subTasksReducer/actions';\nimport { searchItemsAction, searchItemsByLabelAction } from 'reducers/appReducer/actions';\nimport { searchQuerySelector, filtersSelector } from 'reducers/appReducer/selectors';\nimport { logError } from 'utils/logger';\n\nexport function* fetchSubTasksSaga({ payload: taskId }) {\n  const subTasks = yield call(fetchSubTasks, taskId);\n\n  yield put(setSubTasksOfTaskAction({ taskId, subTasks }));\n}\n\nexport function* findSubTasksSaga() {\n  const searchQuery = yield select(searchQuerySelector);\n\n  if (searchQuery) {\n    const subTasks = yield call(findSubTasks, searchQuery);\n\n    yield put(subTasksSetAction(subTasks));\n  }\n}\n\nexport function* findSubTasksByLabelSaga() {\n  const labels = yield select(filtersSelector);\n\n  if (labels) {\n    const subTasks = yield call(findSubTasksByLabel, labels);\n\n    yield put(subTasksSetAction(subTasks));\n  }\n}\n\nexport function* deleteSubTaskSaga({ payload: subTask }) {\n  try {\n    const { id: subTaskId } = subTask;\n\n    yield call(deleteSubTask, subTaskId);\n    // on success delete:\n    yield put(subTaskDeleteSucceedAction(subTask));\n  } catch (error) {\n    logError('Delete subTask request failed:', error);\n  }\n}\n\nexport function* watchSubTasksActions() {\n  yield takeEvery(subTasksFetchAction.type, fetchSubTasksSaga);\n  yield takeEvery(subTaskDeleteAction.type, deleteSubTaskSaga);\n  yield takeLatest(searchItemsAction.type, findSubTasksSaga);\n  yield takeLatest(searchItemsByLabelAction.type, findSubTasksByLabelSaga);\n}\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { routerMiddleware as createRouterMiddleware } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\nimport { logError } from 'utils/logger';\nimport rootReducer, { history } from './rootReducer';\nimport rootSaga from './rootSaga';\n\nconst routerMiddleware = createRouterMiddleware(history);\nconst sagaMiddleware = createSagaMiddleware({\n  onError: (error, { sagaStack }) => {\n    logError('Something came up', error, sagaStack);\n  },\n});\nconst initialState = {};\nconst enhancers = [];\nconst middlewares = [\n  ...getDefaultMiddleware({\n    thunk: false,\n    serializableCheck: false,\n    immutableCheck: { warnAfter: 300 },\n  }),\n  routerMiddleware,\n  sagaMiddleware,\n];\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: middlewares,\n  enhancers,\n  preloadedState: initialState,\n  devTools: { trace: true },\n});\n\nsagaMiddleware.run(rootSaga);\n\nexport { history };\n\nexport default store;\n","import { all } from 'redux-saga/effects';\nimport { watchTasksActions } from 'sagas/tasksSaga';\nimport { watchSubTasksActions } from 'sagas/subTasksSaga';\n\nexport default function* () {\n  yield all([watchTasksActions(), watchSubTasksActions()]);\n}\n","export const routes = {\n  root: () => '/',\n}\n","import styled from 'styled-components';\n\nexport const BorderedCenterArea = styled.div`\n  width: 500px;\n  margin: 20px auto;\n  padding: 20px;\n  max-width: 100%;\n  border: 1px dashed #a5a2a2;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { BorderedCenterArea } from './Default.styles';\n\nconst Default = ({ children }) => <BorderedCenterArea>{children}</BorderedCenterArea>;\n\nDefault.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Default;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.button`\n  padding: 4px 6px;\n  height: fit-content;\n\n  border-radius: 1em;\n  background-color: #96fbe4;\n\n  border: none;\n\n  &.yellow-button {\n    background-color: #ffe082;\n  }\n\n  &.purple-button {\n    background-color: #9c9cc7;\n    color: #fff;\n  }\n`;\n","import React from 'react'\nimport { Wrapper } from './Button.styles'\n\nconst Button = props => <Wrapper {...props} />\n\nexport default Button\n","export const SortTypes = {\n  CREATE_TIME: 'BY_CREATE_TIME',\n  TITLE: 'BY_TITLE',\n};\n","import styled from 'styled-components';\nimport { Button } from 'components/atoms';\n\nexport const SortButton = styled(Button)`\n  margin-right: 5px;\n`;\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { SortTypes } from 'constants/tasksConstants';\nimport { SortButton as SortButtonStyled } from './SortButton.styles';\n\nconst SortButtonTitles = {\n  [SortTypes.CREATE_TIME]: 'Sort by create-date',\n  [SortTypes.TITLE]: 'Sort by title',\n};\n\nexport const SortButton = ({ sortType, sortBy }) => {\n  // UseCallback is needed, since it uses an closure value\n  const onSortClick = useCallback(() => sortBy(sortType), [sortBy, sortType]);\n\n  return (\n    <SortButtonStyled className=\"yellow-button\" onClick={onSortClick}>\n      {SortButtonTitles[sortType]}\n    </SortButtonStyled>\n  );\n};\n\nSortButton.propTypes = {\n  sortType: PropTypes.string.isRequired,\n  sortBy: PropTypes.func.isRequired,\n};\n\nexport default SortButton;\n","import styled from 'styled-components';\n\nexport const Input = styled.input.attrs({ type: 'text' })`\n  border-radius: 1em;\n  border: 1px solid #656565;\n\n  padding: 2px 5px;\n`;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Input } from './TextInput.styles';\n\nconst TextInput = ({ value: initialValue, placeholder, onValueChange }) => {\n  const [value, setValue] = useState(initialValue);\n  // UseCallback is needed, since it uses an closure value\n  const handleTextInputChange = useCallback(\n    event => {\n      setValue(event.target.value);\n      onValueChange(event.target.value);\n    },\n    [onValueChange],\n  );\n\n  // allow rewriting title by parent: subscribe on its change\n  useEffect(() => setValue(initialValue), [initialValue]);\n\n  return <Input placeholder={placeholder} value={value} onChange={handleTextInputChange} />;\n};\n\nTextInput.defaultProps = {\n  value: '',\n  placeholder: '',\n};\n\nTextInput.propTypes = {\n  value: PropTypes.string,\n  placeholder: PropTypes.string,\n  onValueChange: PropTypes.func.isRequired,\n};\n\nexport default TextInput;\n","import React from 'react'\n\nconst Header = () => (<h1>Processes</h1>);\n\nexport default Header;","import styled from 'styled-components';\n\nexport const ListContainter = styled.ul`\n  margin-left: 10px;\n  margin-bottom: 5px;\n\n  .item {\n    margin-bottom: 5px;\n  }\n\n  &.hidden {\n    display: none;\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ListContainter } from './List.styles';\n\nconst List = ({ items, ItemComponent, className }) => (\n  <ListContainter className={className}>\n    {items.map(item => (\n      <li key={item.id}>\n        <ItemComponent {...item} />\n      </li>\n    ))}\n  </ListContainter>\n);\n\nconst ListItemShape = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n});\n\nList.defaultProps = {\n  className: '',\n};\n\nList.propTypes = {\n  className: PropTypes.string,\n  items: PropTypes.arrayOf(ListItemShape).isRequired,\n  ItemComponent: PropTypes.elementType.isRequired,\n};\n\nexport default List;\n","import styled from 'styled-components';\n\nexport const Checkbox = styled.input.attrs({ type: 'checkbox' })`\n  margin-right: 5px;\n`;\n","import React, { useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox as CheckboxStyled } from './Checkbox.styles';\n\nconst Checkbox = ({ onCheck, isUncheckable }) => {\n  const [isChecked, setChecked] = useState(false);\n\n  // UseCallback is needed, since it uses an closure value\n  const onCheckClick = useCallback(() => {\n    if (!isChecked) onCheck();\n    setChecked(checkedState => (isUncheckable ? true : !checkedState));\n  }, [onCheck, isChecked, isUncheckable]);\n\n  return <CheckboxStyled onChange={onCheckClick} checked={isChecked} />;\n};\n\nCheckbox.defaultProps = {\n  isUncheckable: false,\n};\n\nCheckbox.propTypes = {\n  onCheck: PropTypes.func.isRequired,\n  isUncheckable: PropTypes.bool,\n};\n\nexport default Checkbox;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { searchQuerySelector } from 'reducers/appReducer/selectors';\n\nconst MarkedText = ({ children: text }) => {\n  const searchQuery = useSelector(searchQuerySelector);\n  // splits keeping separator\n  const queryRegex = new RegExp(`(${searchQuery})`, 'gi');\n  const parts = text.split(queryRegex);\n\n  return searchQuery ? (\n    <>\n      {parts.map((part, index) => {\n        const isQueryPart = queryRegex.test(part);\n\n        return (\n          // The elements order will change only in case of new text\n          // eslint-disable-next-line react/no-array-index-key\n          <React.Fragment key={index}>{isQueryPart ? <mark>{part}</mark> : part}</React.Fragment>\n        );\n      })}\n    </>\n  ) : (\n    text\n  );\n};\n\nMarkedText.propTypes = {\n  children: PropTypes.string.isRequired,\n};\n\nexport default MarkedText;\n","import styled from 'styled-components';\nimport { Button } from 'components/atoms';\n\nexport const LabelStyled = styled(Button)`\n  padding: 0 5px;\n`;\n","import PropTypes from 'prop-types';\nimport React, { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { searchItemsByLabelAction } from 'reducers/appReducer/actions';\nimport { LabelStyled } from './Label.styles';\n\nconst Label = ({ label }) => {\n  const dispatch = useDispatch();\n  const handleClick = useCallback(\n    () => dispatch(searchItemsByLabelAction(label)),\n    [dispatch, label],\n  );\n\n  return (\n    <LabelStyled className=\"label purple-button\" onClick={handleClick}>\n      #{label}\n    </LabelStyled>\n  );\n};\n\nLabel.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nexport default Label;\n","import React, { useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'components/atoms';\n\nconst ToggleButton = ({ onToggle, onTitle, offTitle }) => {\n  const [isToggled, setState] = useState(false);\n  const toggle = useCallback(() => {\n    setState(isOn => !isOn);\n    onToggle(!isToggled);\n  }, [isToggled, onToggle]);\n\n  return <Button onClick={toggle}>{isToggled ? onTitle : offTitle}</Button>;\n};\n\nToggleButton.propTypes = {\n  onToggle: PropTypes.func.isRequired,\n  onTitle: PropTypes.string.isRequired,\n  offTitle: PropTypes.string.isRequired,\n};\n\nexport default ToggleButton;\n","import { useCallback } from 'react';\nimport { useSelector } from 'react-redux';\n\nexport const useParametrizedSelector = (parametrizedSelectorFactory, params) => {\n  // As we want to recreate selector only if refs to params themselves change\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const selector = useCallback(parametrizedSelectorFactory(...params), [\n    parametrizedSelectorFactory,\n    ...params,\n  ]);\n  // TODO: recreating selector on deps-changes kill memoized optimization of createSelector,\n  // as memo-cache is lost. Re-design parametrized selector approach to get full advantage of memoization\n\n  return useSelector(selector);\n};\n","import React, { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Checkbox as RemoveTaskCheckbox, MarkedText } from 'components/atoms';\nimport { LabelsList } from 'components/molecules';\nimport { subTaskDeleteAction } from 'reducers/subTasksReducer/actions';\n\nconst SubTask = ({ id, title, labels, taskId }) => {\n  const dispatch = useDispatch();\n  const onRemoveClick = useCallback(\n    () => dispatch(subTaskDeleteAction({ id, taskId })),\n    [dispatch, id, taskId],\n  );\n\n  return (\n    <span>\n      <RemoveTaskCheckbox onCheck={onRemoveClick} isUncheckable />\n      <span id={id}>\n        <MarkedText>{title}</MarkedText>\n      </span>\n      <LabelsList labels={labels} />\n    </span>\n  );\n};\n\nSubTask.defaultProps = {\n  labels: [],\n};\n\nexport const SubTaskShape = {\n  id: PropTypes.string.isRequired,\n  taskId: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  labels: PropTypes.arrayOf(PropTypes.string),\n};\n\nSubTask.propTypes = SubTaskShape;\n\nexport default SubTask;\n","import styled from 'styled-components';\n\nexport const ButtonContainer = styled.div`\n  margin: 5px 0;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { SortTypes } from 'constants/tasksConstants';\nimport { SortButton } from 'components/atoms';\nimport { ButtonContainer } from './SortTasksButtons.styles';\n\nconst SortTasksButtons = ({ sortBy }) => (\n  <ButtonContainer>\n    {Object.values(SortTypes).map(sortType => (\n      <SortButton key={sortType} sortBy={sortBy} sortType={sortType} />\n    ))}\n  </ButtonContainer>\n);\n\nSortTasksButtons.propTypes = {\n  sortBy: PropTypes.func.isRequired,\n};\n\nexport default SortTasksButtons;\n","import styled from 'styled-components';\nimport { Button } from 'components/atoms';\n\nexport const LabelStyled = styled(Button)`\n  padding: 0 5px;\n`;\n\nexport const LabelsListContainer = styled.ul`\n  margin: 3px 0 10px;\n\n  & > li {\n    display: inline-block;\n    margin-right: 5px;\n  }\n`;\n\nexport const LabelListItem = styled.li`\n  display: inline-block;\n  margin-right: 5px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Label } from 'components/atoms';\nimport { LabelsListContainer, LabelListItem } from './LabelsList.styles';\n\nconst LabelsList = ({ labels }) => (\n  <LabelsListContainer>\n    {labels.map(label => (\n      <LabelListItem key={label}>\n        <Label label={label} />\n      </LabelListItem>\n    ))}\n  </LabelsListContainer>\n);\n\nLabelsList.defaultProps = {\n  labels: [],\n};\n\nLabelsList.propTypes = {\n  labels: PropTypes.arrayOf(PropTypes.string),\n};\n\nexport default LabelsList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { createSubTasksByTaskIdSelector } from 'reducers/subTasksReducer/selectors';\nimport { useParametrizedSelector } from 'components/hooks/useParametrizedSelector';\nimport { List } from 'components/atoms';\nimport { SubTask } from 'components/molecules';\nimport { isSearchModeSelector } from 'reducers/appReducer/selectors';\n\nconst SubTasksList = ({ taskId, isExpanded: isExpandedByButton }) => {\n  const isSearchMode = useSelector(isSearchModeSelector);\n  const subTasks = useParametrizedSelector(createSubTasksByTaskIdSelector(taskId));\n  const shouldShowList = (isExpandedByButton || isSearchMode) && subTasks.length;\n\n  return <List className={!shouldShowList && 'hidden'} items={subTasks} ItemComponent={SubTask} />;\n};\n\nSubTasksList.propTypes = {\n  taskId: PropTypes.string.isRequired,\n  isExpanded: PropTypes.bool.isRequired,\n};\n\nexport default SubTasksList;\n","export const formatTimeForRender = timeInMilliseconds => {\n  const date = new Date(timeInMilliseconds);\n\n  return `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;\n};\n\nconst isTaskOfSomeSubTask = (subTasks, taskId) =>\n  subTasks.some(subTask => subTask.taskId === taskId);\n\n// TODO: Consider using lodash for such operations\nconst searchByProp = (array, searchItem, property) =>\n  array.find(item => item[property] === searchItem[property]);\n\nconst isFoundTask = (task, foundTasks) => !!searchByProp(foundTasks, task, 'id');\n\nexport const getFoundTasks = (allTasks, subTasks, foundTasks) =>\n  allTasks.filter(task => isFoundTask(task, foundTasks) || isTaskOfSomeSubTask(subTasks, task.id));\n","import styled from 'styled-components';\n\nexport const TaskWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin: 5px 0;\n`;\n\nexport const TaskName = styled.span`\n  flex-basis: 40%;\n  max-width: 40%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n","import React, { useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { MarkedText, ToggleButton } from 'components/atoms';\nimport { subTasksFetchAction } from 'reducers/subTasksReducer/actions';\nimport { isSearchModeSelector } from 'reducers/appReducer/selectors';\nimport SubTasksList from 'components/organisms/SubTasksList/SubTasksList';\nimport { formatTimeForRender } from 'helpers/tasksHelpers';\nimport { TaskWrapper, TaskName } from './Task.styles';\n\nconst Task = ({ title, id, createTime }) => {\n  const isSearchMode = useSelector(isSearchModeSelector);\n  const [isSubTasksListExpanded, setSubTasksListExpanded] = useState(false);\n  const dispatch = useDispatch();\n  const onToggleExpand = useCallback(\n    isExpanded => {\n      if (isExpanded) {\n        dispatch(subTasksFetchAction(id));\n      }\n      setSubTasksListExpanded(isExpanded);\n    },\n    [id, dispatch],\n  );\n\n  return (\n    <>\n      <TaskWrapper>\n        <TaskName>\n          <MarkedText>{title}</MarkedText>\n        </TaskName>\n        <span>{formatTimeForRender(createTime)}</span>\n        {!isSearchMode && <ToggleButton onToggle={onToggleExpand} onTitle=\"˅\" offTitle=\"˄\" />}\n      </TaskWrapper>\n      <SubTasksList taskId={id} isExpanded={isSubTasksListExpanded} />\n    </>\n  );\n};\n\nexport const TaskShape = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  createTime: PropTypes.number.isRequired,\n};\n\nTask.propTypes = TaskShape;\n\nexport default Task;\n","export const tasksListSelector = state => state.tasks.tasksList;\n\nexport const tasksByIdSelector = (state, taskId) =>\n  state.tasks.tasksList.find(task => task.id === taskId);\n","import { useState } from 'react';\nimport { SortTypes } from 'constants/tasksConstants';\n\nconst comparatorsBySortType = {\n  [SortTypes.CREATE_TIME]: (a, b) => a.createTime - b.createTime,\n  [SortTypes.TITLE]: (a, b) => (a.title < b.title ? -1 : 1),\n};\n\nconst sortItemsImmutably = (items, sortType) => {\n  const sortedItems = [...items];\n\n  sortedItems.sort(comparatorsBySortType[sortType]);\n\n  return sortedItems;\n};\n\nconst useSorting = items => {\n  const [sortType, setSortType] = useState(SortTypes.CREATE_TIME);\n  const sortedItems = sortItemsImmutably(items, sortType);\n\n  return { sortedItems, sortBy: setSortType };\n};\n\nexport default useSorting;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { tasksFetchAction } from 'reducers/tasksReducer/actions';\nimport Task from 'components/organisms/Task/Task';\nimport { List } from 'components/atoms';\nimport { SortTasksButtons } from 'components/molecules';\nimport { tasksListSelector } from 'reducers/tasksReducer/selectors';\nimport useSorting from './hooks/useSorting';\n\nconst TasksList = () => {\n  const tasks = useSelector(tasksListSelector);\n  const { sortedItems, sortBy } = useSorting(tasks);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(tasksFetchAction());\n  }, []);\n\n  return (\n    <section>\n      <SortTasksButtons sortBy={sortBy} />\n      <List items={sortedItems} ItemComponent={Task} />\n    </section>\n  );\n};\n\nexport default TasksList;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { filtersSelector } from 'reducers/appReducer/selectors';\nimport { LabelsList } from 'components/molecules';\n\nconst FiltersPanel = () => {\n  const filters = useSelector(filtersSelector);\n\n  return (\n    <div>\n      <LabelsList labels={filters} />\n    </div>\n  );\n};\n\nexport default FiltersPanel;\n","import styled from 'styled-components';\n\nexport const TaskFormContainer = styled.section`\n  & button {\n    margin-left: 5px;\n  }\n`;\n","import React, { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Button, TextInput } from 'components/atoms';\nimport { FiltersPanel } from 'components/organisms';\nimport { taskCreateAction } from 'reducers/tasksReducer/actions';\nimport { setAppModeAction, searchItemsAction } from 'reducers/appReducer/actions';\nimport { isSearchModeSelector } from 'reducers/appReducer/selectors';\nimport { TaskFormContainer } from './TaskForm.styles';\n\n// TODO: split into organisms\nconst TaskForm = ({ title: initialTitle }) => {\n  const [title, setTitle] = useState(initialTitle);\n  const dispatch = useDispatch();\n  const isSearchMode = useSelector(isSearchModeSelector);\n  const onCreate = useCallback(() => {\n    dispatch(taskCreateAction({ title }));\n    setTitle('');\n  }, [title, dispatch]);\n\n  const onToggleSearchMode = useCallback(() => {\n    // Clear inbox on leaving search-mode\n    if (isSearchMode) {\n      setTitle('');\n    } else {\n      dispatch(searchItemsAction(title));\n    }\n\n    dispatch(setAppModeAction(!isSearchMode));\n  }, [dispatch, isSearchMode, title]);\n\n  const onTitleChange = useCallback(\n    value => {\n      setTitle(value);\n      // TODO: too many if-s => consider to split the component into two\n      if (isSearchMode) dispatch(searchItemsAction(value));\n    },\n    [isSearchMode, dispatch],\n  );\n\n  return (\n    <TaskFormContainer>\n      <TextInput value={title} placeholder=\"task title\" onValueChange={onTitleChange} />\n      {!isSearchMode && <Button onClick={onCreate}>Create</Button>}\n      <Button onClick={onToggleSearchMode}>{isSearchMode ? 'Exit Search' : 'Start Search'}</Button>\n      <FiltersPanel />\n    </TaskFormContainer>\n  );\n};\n\nTaskForm.defaultProps = {\n  title: '',\n};\n\nTaskForm.propTypes = {\n  title: PropTypes.string,\n};\n\nexport default TaskForm;\n","import React from 'react';\nimport { TaskList } from 'components/organisms';\nimport PageHeader from 'components/atoms/PageHeader/PageHeader';\nimport TaskForm from 'components/organisms/TaskForm/TaskForm';\n\nconst TasksPage = () => (\n  <>\n    <PageHeader />\n    <main>\n      <TaskForm />\n      <TaskList />\n    </main>\n  </>\n);\n\nexport default TasksPage;\n","import React from 'react'\nimport { DefaultTemplate } from 'components/templates'\nimport { Tasks } from 'modules'\n\nconst Home = () => (\n  <DefaultTemplate>\n    <Tasks />\n  </DefaultTemplate>\n)\n\nexport default Home\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { DefaultTemplate } from 'components/templates'\nimport { routes } from 'config/routes'\n\nconst NotFound = () => (\n  <DefaultTemplate>\n    <h1>Page not found</h1>\n    <Link to={routes.root()}>Go to home</Link>\n  </DefaultTemplate>\n)\n\nexport default NotFound\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport { routes } from 'config/routes'\nimport Home from './Home/Home'\nimport NotFound from './NotFound/NotFound'\n\nconst Routes = () => (\n  <Switch>\n    <Route path={routes.root()} component={Home} />\n    <Route component={NotFound} />\n  </Switch>\n)\n\nexport default Routes\n","import { createGlobalStyle } from 'styled-components'\n\nexport default createGlobalStyle`\n  * {\n    padding: 0;\n    margin: 0;\n    outline: none;\n\n    &,\n    &:before,\n    &:after {\n      box-sizing: border-box;\n    }\n  }\n\n  body {\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    font-family: 'Helvetica', sans-serif;\n    font-weight: 400;\n    font-size: 14px;\n    line-height: 1.4;\n  }\n\n  a {\n    text-decoration: none;\n\n    &,\n    &:hover {\n      color: inherit;\n    }\n  }\n\n  p {\n    margin: 0;\n  }\n\n  ul,\n  ol {\n    margin: 0;\n    list-style: none;\n  }\n\n  img {\n    max-width: 100%;\n  }\n\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    margin: 0;\n  }\n\n  pre {\n    margin: 0;\n  }\n\n  #root {\n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n  }\n`\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport store, { history } from 'store';\nimport Routes from 'routes';\nimport GlobalStyle from './styles';\n\nconst App = () => (\n  <>\n    <GlobalStyle />\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <Routes />\n      </ConnectedRouter>\n    </Provider>\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nwindow.logError = alert; // for debugging via Cloud9\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}