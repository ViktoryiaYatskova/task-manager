{"version":3,"sources":["utils/logger.js","reducers/tasksReducer/actions.js","reducers/tasksReducer/tasksReducer.js","helpers/subTaskHelpers.js","reducers/appReducer/actions.js","reducers/subTasksReducer/actions.js","reducers/subTasksReducer/subTasksReducer.js","reducers/appReducer/appReducer.js","store/rootReducer.js","utils/storage.js","utils/delay.js","api/config.js","api/utils.js","api/tasks/createTask.js","api/tasks/fetchTasks.js","api/tasks/deleteTask.js","api/tasks/findTasks.js","reducers/appReducer/selectors.js","reducers/subTasksReducer/selectors.js","sagas/tasksSaga.js","api/subTasks/deleteSubTask.js","api/subTasks/fetchSubTasks.js","api/subTasks/findSubTasks.js","api/subTasks/findSubTasksByLabel.js","sagas/subTasksSaga.js","store/rootSaga.js","store/index.js","config/routes.js","components/templates/Default/Default.styles.js","components/templates/Default/Default.js","components/atoms/Button/Button.styles.js","components/atoms/Button/Button.js","constants/tasksConstants.js","components/atoms/SortButton/SortButton.styles.js","components/atoms/SortButton/SortButton.js","components/atoms/TextInput/TextInput.styles.js","components/atoms/TextInput/TextInput.js","components/atoms/PageHeader/PageHeader.js","components/atoms/List/List.styles.js","components/atoms/List/List.js","components/atoms/Checkbox/Checkbox.styles.js","components/atoms/Checkbox/Checkbox.js","components/atoms/MarkedText/MarkedText.js","components/hooks/useParametrizedSelector.js","components/molecules/SortTasksButtons/SortTasksButtons.styles.js","components/molecules/SortTasksButtons/SortTasksButtons.js","components/molecules/LabelsList/LabelsList.styles.js","components/molecules/LabelsList/LabelsList.js","components/molecules/SubTask/SubTask.js","components/organisms/SubTasksList/SubTasksList.js","helpers/tasksHelpers.js","components/organisms/Task/Task.styles.js","components/organisms/Task/Task.js","reducers/tasksReducer/selectors.js","components/organisms/TaskList/hooks/useSorting.js","components/organisms/TaskList/TaskList.js","components/organisms/FiltersPanel/FiltersPanel.js","components/organisms/TaskForm/TaskForm.styles.js","components/organisms/TaskForm/TaskForm.js","modules/Tasks/Tasks.js","routes/Home/Home.js","routes/NotFound/NotFound.js","routes/index.js","styles.js","App.js","index.js"],"names":["logFunction","console","error","logError","args","join","logRequest","requestName","func","result","log","tasksSetAction","createAction","taskCreateAction","tasksFetchAction","tasksSetFoundAction","tasksResetFoundAction","tasksReducer","createReducer","tasksList","foundTasksList","builder","addCase","state","payload","uniques","array","Set","setAppModeAction","searchItemsAction","subTasksFetchAction","subTasksSetAction","subTasksSetFoundAction","subTasksResetFoundAction","subTaskDeleteAction","subTaskDeleteSucceedAction","searchSubTasksByLabelAction","subTasksReducer","allSubTasks","foundSubTasksList","filters","taskId","subTasks","label","isSearchMode","appReducer","searchQuery","history","createBrowserHistory","reducer","combineReducers","router","connectRouter","tasks","app","Storage","constructor","key","this","localStorage","getItem","setItem","JSON","stringify","get","parse","set","value","callback","Promise","resolve","setTimeout","labels","Array","from","length","map","faker","lorem","word","getRandomNumber","min","max","Math","floor","random","delay","title","task","id","datatype","uuid","createTime","Date","now","sentence","subTaskList","allTasks","targetTask","some","Error","filter","lowerCasedTitle","toLowerCase","includes","isSearchModeSelector","searchQuerySelector","foundSubTasksSelector","subTaskFiltersSelector","subTasksByTaskIdSelector","visibleSubTasksByTaskIdSelectorFactory","createSelector","subTask","foundSubTasksByTaskIdSelectorFactory","foundSubTasks","fetchTasksSaga","call","fetchTasks","put","findTasksSaga","select","findTasks","createTaskSaga","newTask","createTask","deleteTaskSaga","deleteTask","fork","deleteEmptyTaskSaga","subTaskId","subTasksList","isLastSubTask","watchTasksActions","takeLatest","type","takeEvery","find","t","st","searchLabels","reduce","filteredSubTasks","searchLabel","lowerCasedLabel","fetchSubTasksSaga","fetchSubTasks","findSubTasksSaga","findSubTasks","findSubTasksByLabelSaga","findSubTasksByLabel","deleteSubTaskSaga","deleteSubTask","watchSubTasksActions","initApp","routerMiddleware","createRouterMiddleware","sagaMiddleware","createSagaMiddleware","onError","sagaStack","middlewares","getDefaultMiddleware","thunk","serializableCheck","immutableCheck","warnAfter","store","configureStore","rootReducer","middleware","enhancers","preloadedState","devTools","trace","run","all","window","routes","BorderedCenterArea","styled","div","Default","children","Wrapper","button","Button","props","SortTypes","CREATE_TIME","TITLE","SortButton","SortButtonTitles","sortType","sortBy","onSortClick","useCallback","className","onClick","Input","input","attrs","TextInput","initialValue","placeholder","onValueChange","setValue","useState","handleTextInputChange","event","target","useEffect","onChange","defaultProps","Header","ListContainter","ul","List","items","ItemComponent","item","Checkbox","onCheck","isUncheckable","isChecked","setChecked","onCheckClick","checkedState","checked","MarkedText","text","useSelector","queryRegex","RegExp","parts","split","part","index","isQueryPart","test","Fragment","ButtonContainer","SortTasksButtons","Object","values","LabelStyled","LabelsListContainer","LabelListItem","li","Label","dispatch","useDispatch","handleClick","LabelsList","SubTask","onRemoveClick","PropTypes","string","isRequired","arrayOf","SubTasksList","parametrizedSelectorFactory","params","selector","useParametrizedSelector","formatTimeForRender","timeInMilliseconds","date","toLocaleDateString","toLocaleTimeString","getFoundTasks","foundTasks","searchByProp","searchItem","property","isFoundTask","isAnySubTaskOfTask","TaskWrapper","TaskName","span","number","Task","onViewSubtasksClick","visibleTasksSelector","comparatorsBySortType","a","b","useSorting","setSortType","sortedItems","sort","sortItemsImmutably","TasksList","FiltersPanel","TaskFormContainer","section","TaskForm","initialTitle","setTitle","onCreate","onToggleSearchMode","onTitleChange","TasksPage","PageHeader","TaskList","Home","Tasks","NotFound","to","Routes","path","component","createGlobalStyle","App","alert","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.773e6df1.chunk.js","sourcesContent":["// eslint-disable-next-line no-console\nconst logFunction = console.error; // window.alert  - for development from Tablet purpose only\n\nexport const logError = (...args) => {\n  logFunction(args.join(' '));\n};\n\nexport const logRequest =\n  (requestName, func) =>\n  (...args) => {\n    const result = func(...args);\n\n    // eslint-disable-next-line no-console\n    console.log('Request', requestName, 'args', args, 'result', result);\n\n    return result;\n  };\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const tasksSetAction = createAction('tasks/set');\nexport const taskCreateAction = createAction('task/create');\nexport const tasksFetchAction = createAction('tasks/fetch');\nexport const tasksSetFoundAction = createAction('tasks/set/found');\nexport const tasksResetFoundAction = createAction('tasks/reset/found');\n","import { createReducer } from '@reduxjs/toolkit';\nimport { tasksSetAction, tasksSetFoundAction, tasksResetFoundAction } from './actions';\n\nconst initialTasksState = {\n  tasksList: [],\n  foundTasksList: [],\n};\n\nconst tasksReducer = createReducer(initialTasksState, builder => {\n  builder\n    .addCase(tasksSetAction, (state, { payload }) => ({\n      ...state,\n      tasksList: payload,\n    }))\n    .addCase(tasksSetFoundAction, (state, { payload: foundTasksList }) => ({\n      ...state,\n      foundTasksList,\n    }))\n    .addCase(tasksResetFoundAction, state => ({\n      ...state,\n      foundTasksList: [],\n    }));\n});\n\nexport default tasksReducer;\n","export const isLastSubTask = (subTaskId, subTasksList) =>\n  !subTasksList.length ||\n  (subTasksList.length === 1 && subTasksList.some(({ id }) => id === subTaskId));\n\nexport const uniques = (...array) => [...new Set(array)];\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const setAppModeAction = createAction('app/mode');\nexport const searchItemsAction = createAction('app/searchItems');\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const subTasksFetchAction = createAction('subTasks/fetch');\nexport const subTasksSetAction = createAction('subTasks/set');\nexport const subTasksSetFoundAction = createAction('subTasks/set/found');\nexport const subTasksResetFoundAction = createAction('subTask/reset/found');\nexport const subTaskDeleteAction = createAction('subTask/delete');\nexport const subTaskDeleteSucceedAction = createAction('subTask/delete/success');\nexport const searchSubTasksByLabelAction = createAction('subTask/search:byLabel');\n","import { createReducer } from '@reduxjs/toolkit';\nimport { uniques } from 'helpers/subTaskHelpers';\nimport { setAppModeAction } from 'reducers/appReducer/actions';\nimport {\n  subTasksSetAction,\n  subTasksSetFoundAction,\n  subTasksResetFoundAction,\n  searchSubTasksByLabelAction,\n} from './actions';\n\nconst initialTasksState = {\n  allSubTasks: {},\n  foundSubTasksList: [],\n  filters: [],\n};\n\nconst subTasksReducer = createReducer(initialTasksState, builder => {\n  builder\n    .addCase(subTasksSetAction, (state, { payload }) => ({\n      ...state,\n      allSubTasks: {\n        ...state.allSubTasks,\n        [payload.taskId]: payload.subTasks,\n      },\n    }))\n    .addCase(subTasksSetFoundAction, (state, { payload: foundSubTasksList }) => ({\n      ...state,\n      foundSubTasksList,\n    }))\n    .addCase(subTasksResetFoundAction, state => ({\n      ...state,\n      foundSubTasksList: [],\n    }))\n    .addCase(searchSubTasksByLabelAction, (state, { payload: label }) => ({\n      ...state,\n      filters: uniques(...state.filters, label),\n    }))\n    // TODO: get rid of alien action\n    .addCase(setAppModeAction, (state, { payload: isSearchMode }) => ({\n      ...state,\n      filters: isSearchMode ? state.filters : [],\n      // Temporary workaround : collapse all subtasks on searchMode\n      // TODO: refetch only visible in regular mode subtasks on delete subtask\n      allSubTasks: isSearchMode ? state.allSubTasks : {},\n    }));\n});\n\nexport default subTasksReducer;\n","import { createReducer } from '@reduxjs/toolkit';\nimport { searchSubTasksByLabelAction } from 'reducers/subTasksReducer/actions';\nimport { setAppModeAction, searchItemsAction } from './actions';\n\nconst initialTasksState = {\n  isSearchMode: false,\n  searchQuery: '',\n};\n\nconst appReducer = createReducer(initialTasksState, builder => {\n  builder\n    // TODO: get rid of using alian action\n    .addCase(searchSubTasksByLabelAction, state => ({\n      ...state,\n      isSearchMode: true,\n      searchQuery: '',\n    }))\n    .addCase(setAppModeAction, (state, { payload: isSearchMode }) => ({\n      ...state,\n      isSearchMode,\n      searchQuery: isSearchMode ? state.searchQuery : '',\n    }))\n    .addCase(searchItemsAction, (state, { payload: searchQuery }) => ({\n      ...state,\n      searchQuery,\n    }));\n});\n\nexport default appReducer;\n","import { createBrowserHistory } from 'history';\nimport { combineReducers } from '@reduxjs/toolkit';\nimport { connectRouter } from 'connected-react-router';\nimport { tasksReducer, subTasksReducer, appReducer } from 'reducers';\n\nconst history = createBrowserHistory();\n\nconst reducer = combineReducers({\n  router: connectRouter(history),\n  tasks: tasksReducer,\n  subTasks: subTasksReducer,\n  app: appReducer,\n});\n\nexport { history };\n\nexport default reducer;\n","class Storage {\n  key = null\n\n  constructor(key) {\n    this.key = key\n    if (!localStorage.getItem(this.key)) localStorage.setItem(this.key, JSON.stringify([]))\n  }\n\n  get() {\n    try {\n      return JSON.parse(localStorage.getItem(this.key))\n    } catch {\n      return null\n    }\n  }\n\n  set(value) {\n    localStorage.setItem(this.key, JSON.stringify(value))\n  }\n}\n\nexport default {\n  tasks: new Storage('tasks'),\n  subTasks: new Storage('subTasks'),\n}\n","export default callback =>\n  (...args) =>\n    new Promise(resolve => setTimeout(() => resolve(callback(...args)), 1500))\n","import faker from 'faker'\n\nexport const labels = Array.from({ length: 10 }).map(() => faker.lorem.word())\n","export const getRandomNumber = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min\n","import faker from 'faker';\nimport Storage from 'utils/storage';\nimport delay from 'utils/delay';\nimport { labels } from '../config';\nimport { getRandomNumber } from '../utils';\n\nexport default delay(({ title }) => {\n  const tasks = Storage.tasks.get();\n  const subTasks = Storage.subTasks.get();\n  const task = {\n    id: faker.datatype.uuid(),\n    createTime: Date.now(),\n    title: title || faker.lorem.sentence(),\n  };\n  const subTaskList = Array.from({ length: getRandomNumber(1, 10) }).map(() => ({\n    id: faker.datatype.uuid(),\n    taskId: task.id,\n    title: faker.lorem.sentence(),\n    labels: [\n      ...new Set(\n        Array.from({ length: getRandomNumber(1, 5) }).map(() => labels[getRandomNumber(0, 9)]),\n      ),\n    ],\n  }));\n\n  Storage.tasks.set([...tasks, task]);\n  Storage.subTasks.set([...subTasks, ...subTaskList]);\n\n  return task;\n});\n","import Storage from 'utils/storage'\nimport delay from 'utils/delay'\n\nexport default delay(() => Storage.tasks.get())\n","import Storage from 'utils/storage';\nimport delay from 'utils/delay';\nimport { logRequest } from 'utils/logger';\n\nexport default delay(\n  logRequest('deleteTask', taskId => {\n    const allTasks = Storage.tasks.get();\n    const targetTask = allTasks.some(task => task.id === taskId);\n\n    if (!targetTask) {\n      throw new Error(`Task ${taskId} wasn't found`);\n    }\n\n    Storage.tasks.set([...allTasks.filter(task => task.id !== taskId)]);\n\n    return targetTask;\n  }),\n);\n","import Storage from 'utils/storage';\nimport delay from 'utils/delay';\n\nexport default delay(title => {\n  const allTasks = Storage.tasks.get();\n  const lowerCasedTitle = title.toLowerCase();\n\n  return allTasks.filter(task => task.title.toLowerCase().includes(lowerCasedTitle));\n});\n","export const isSearchModeSelector = state => state.app.isSearchMode;\n\nexport const searchQuerySelector = state => state.app.searchQuery;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { isSearchModeSelector } from 'reducers/appReducer/selectors';\n\nexport const foundSubTasksSelector = state => state.subTasks.foundSubTasksList;\nexport const subTaskFiltersSelector = state => state.subTasks.filters;\n\nexport const foundSubTasksByTaskIdSelectorFactory = taskId =>\n  createSelector(foundSubTasksSelector, foundSubTasksList =>\n    foundSubTasksList.filter(subTask => subTask.taskId === taskId),\n  );\n\nexport const subTasksByTaskIdSelector = (state, taskId) => state.subTasks.allSubTasks[taskId] || [];\n\nexport const visibleSubTasksByTaskIdSelectorFactory = taskId =>\n  createSelector(\n    isSearchModeSelector,\n    // TODO: optimize, as this call produces new function each time\n    foundSubTasksByTaskIdSelectorFactory(taskId),\n    state => subTasksByTaskIdSelector(state, taskId),\n    (isSearchMode, foundSubTasks, subTasks) => (isSearchMode ? foundSubTasks : subTasks),\n  );\n","import { put, takeEvery, takeLatest, call, select, fork } from 'redux-saga/effects';\nimport { fetchTasks, createTask, deleteTask, findTasks } from 'api/tasks';\nimport {\n  tasksFetchAction,\n  tasksSetAction,\n  taskCreateAction,\n  tasksSetFoundAction,\n} from 'reducers/tasksReducer/actions';\nimport { searchItemsAction } from 'reducers/appReducer/actions';\nimport { subTaskDeleteSucceedAction } from 'reducers/subTasksReducer/actions';\nimport { subTasksByTaskIdSelector } from 'reducers/subTasksReducer/selectors';\nimport { isSearchModeSelector, searchQuerySelector } from 'reducers/appReducer/selectors';\nimport { isLastSubTask } from 'helpers/subTaskHelpers';\nimport { logError } from 'utils/logger';\n\nexport function* fetchTasksSaga() {\n  const tasks = yield call(fetchTasks);\n\n  yield put(tasksSetAction(tasks));\n}\n\nexport function* findTasksSaga() {\n  const searchQuery = yield select(searchQuerySelector);\n\n  if (searchQuery) {\n    const tasks = yield call(findTasks, searchQuery);\n\n    yield put(tasksSetFoundAction(tasks));\n  }\n}\n\nexport function* createTaskSaga({ payload: newTask }) {\n  yield call(createTask, newTask);\n  yield call(fetchTasksSaga);\n}\n\nexport function* deleteTaskSaga({ payload: taskId }) {\n  try {\n    yield call(deleteTask, taskId);\n\n    const isSearchMode = yield select(isSearchModeSelector);\n\n    if (isSearchMode) {\n      yield fork(findTasksSaga);\n    }\n    yield fork(fetchTasksSaga);\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    logError('Delete task failed:', error);\n  }\n}\n\nexport function* deleteEmptyTaskSaga({ payload: subTask }) {\n  const { taskId, id: subTaskId } = subTask;\n  const subTasksList = yield select(subTasksByTaskIdSelector, taskId);\n\n  if (isLastSubTask(subTaskId, subTasksList)) {\n    yield call(deleteTaskSaga, { payload: taskId });\n  }\n}\n\nexport function* watchTasksActions() {\n  yield takeLatest(tasksFetchAction.type, fetchTasksSaga);\n  yield takeEvery(taskCreateAction.type, createTaskSaga);\n  yield takeLatest(searchItemsAction.type, findTasksSaga);\n  yield takeEvery(subTaskDeleteSucceedAction.type, deleteEmptyTaskSaga);\n}\n","import Storage from 'utils/storage';\nimport delay from 'utils/delay';\nimport { logRequest } from 'utils/logger';\n\nexport default delay(\n  logRequest('deleteSubTask', subTaskId => {\n    const subTasks = Storage.subTasks.get();\n    const subTask = subTasks.find(t => t.id === subTaskId);\n\n    if (subTask) {\n      Storage.subTasks.set(subTasks.filter(st => st.id !== subTaskId));\n\n      return subTask;\n    }\n\n    throw new Error(`SubTask [${subTaskId}] not found`);\n  }),\n);\n","import Storage from 'utils/storage'\nimport delay from 'utils/delay'\n\nexport default delay(taskId => {\n  const subTasks = Storage.subTasks.get()\n\n  return subTasks.filter(subTask => subTask.taskId === taskId)\n})\n","import Storage from 'utils/storage';\nimport delay from 'utils/delay';\nimport { logRequest } from 'utils/logger';\n\nexport default delay(\n  logRequest('findSubTasks', title => {\n    const subTasks = Storage.subTasks.get();\n    const lowerCasedTitle = title.toLowerCase();\n\n    return subTasks.filter(subTask => subTask.title.toLowerCase().includes(lowerCasedTitle));\n  }),\n);\n","import Storage from 'utils/storage';\nimport delay from 'utils/delay';\nimport { logRequest } from 'utils/logger';\n\nexport default delay(\n  logRequest('findSubTasksByLabel', searchLabels => {\n    const subTasks = Storage.subTasks.get();\n\n    return searchLabels.reduce((filteredSubTasks, searchLabel) => {\n      const lowerCasedLabel = searchLabel.toLowerCase();\n\n      return filteredSubTasks.filter(subTask =>\n        subTask.labels.some(label => label.toLowerCase() === lowerCasedLabel),\n      );\n    }, subTasks);\n  }),\n);\n","import { put, takeEvery, call, takeLatest, select, fork } from 'redux-saga/effects';\nimport { fetchSubTasks, deleteSubTask, findSubTasks, findSubTasksByLabel } from 'api/subTasks';\nimport {\n  subTasksFetchAction,\n  subTasksSetAction,\n  subTaskDeleteAction,\n  subTaskDeleteSucceedAction,\n  subTasksSetFoundAction,\n  searchSubTasksByLabelAction,\n} from 'reducers/subTasksReducer/actions';\nimport { searchItemsAction } from 'reducers/appReducer/actions';\nimport { subTaskFiltersSelector } from 'reducers/subTasksReducer/selectors';\nimport { isSearchModeSelector, searchQuerySelector } from 'reducers/appReducer/selectors';\nimport { logError } from 'utils/logger';\n\nexport function* fetchSubTasksSaga({ payload: taskId }) {\n  const subTasks = yield call(fetchSubTasks, taskId);\n\n  yield put(subTasksSetAction({ taskId, subTasks }));\n}\n\nexport function* findSubTasksSaga() {\n  const searchQuery = yield select(searchQuerySelector);\n\n  if (searchQuery) {\n    const subTasks = yield call(findSubTasks, searchQuery);\n\n    yield put(subTasksSetFoundAction(subTasks));\n  }\n}\n\nexport function* findSubTasksByLabelSaga() {\n  const labels = yield select(subTaskFiltersSelector);\n\n  if (labels) {\n    const subTasks = yield call(findSubTasksByLabel, labels);\n\n    yield put(subTasksSetFoundAction(subTasks));\n  }\n}\n\nexport function* deleteSubTaskSaga({ payload: subTask }) {\n  try {\n    const { id: subTaskId, taskId } = subTask;\n    const isSearchMode = yield select(isSearchModeSelector);\n\n    yield call(deleteSubTask, subTaskId);\n    // on success delete:\n    yield put(subTaskDeleteSucceedAction(subTask));\n\n    if (isSearchMode) {\n      // refetch found subtask to show relevant data\n      // TODO: optimize: call only for subTask.taskId\n      yield fork(findSubTasksByLabelSaga);\n      yield fork(findSubTasksSaga);\n    }\n    yield call(fetchSubTasksSaga, { payload: taskId });\n  } catch (error) {\n    logError('Delete subTask request failed:', error);\n  }\n}\n\nexport function* watchSubTasksActions() {\n  yield takeEvery(subTasksFetchAction.type, fetchSubTasksSaga);\n  yield takeEvery(subTaskDeleteAction.type, deleteSubTaskSaga);\n  yield takeLatest(searchItemsAction.type, findSubTasksSaga);\n  yield takeLatest(searchSubTasksByLabelAction.type, findSubTasksByLabelSaga);\n}\n","import { all, takeLatest, call } from 'redux-saga/effects';\nimport { fetchTasksSaga, watchTasksActions } from 'sagas/tasksSaga';\nimport { watchSubTasksActions } from 'sagas/subTasksSaga';\n\nfunction* initApp() {\n  yield call(fetchTasksSaga);\n}\n\nexport default function* () {\n  yield takeLatest('app/init', initApp);\n  yield all([watchTasksActions(), watchSubTasksActions()]);\n}\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { routerMiddleware as createRouterMiddleware } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\nimport { logError } from 'utils/logger';\nimport rootReducer, { history } from './rootReducer';\nimport rootSaga from './rootSaga';\n\nconst routerMiddleware = createRouterMiddleware(history);\nconst sagaMiddleware = createSagaMiddleware({\n  onError: (error, { sagaStack }) => {\n    logError('Something came up', error, sagaStack);\n  },\n});\nconst initialState = {};\nconst enhancers = [];\nconst middlewares = [\n  ...getDefaultMiddleware({\n    thunk: false,\n    serializableCheck: false,\n    immutableCheck: { warnAfter: 300 },\n  }),\n  routerMiddleware,\n  sagaMiddleware,\n];\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: middlewares,\n  enhancers,\n  preloadedState: initialState,\n  devTools: { trace: true },\n});\n\nsagaMiddleware.run(rootSaga);\n\nwindow.store = store;\n\nexport { history };\n\nexport default store;\n","export const routes = {\n  root: () => '/',\n}\n","import styled from 'styled-components';\n\nexport const BorderedCenterArea = styled.div`\n  width: 500px;\n  margin: 20px auto;\n  padding: 20px;\n  max-width: 100%;\n  border: 1px dashed #a5a2a2;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { BorderedCenterArea } from './Default.styles';\n\nconst Default = ({ children }) => <BorderedCenterArea>{children}</BorderedCenterArea>;\n\nDefault.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Default;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.button`\n  padding: 4px 6px;\n  height: fit-content;\n\n  border-radius: 1em;\n  background-color: #96fbe4;\n\n  border: none;\n\n  &.yellow-button {\n    background-color: #ffe082;\n  }\n\n  &.purple-button {\n    background-color: #9c9cc7;\n    color: #fff;\n  }\n`;\n","import React from 'react'\nimport { Wrapper } from './Button.styles'\n\nconst Button = props => <Wrapper {...props} />\n\nexport default Button\n","export const SortTypes = {\n  CREATE_TIME: 'BY_CREATE_TIME',\n  TITLE: 'BY_TITLE',\n};\n","import styled from 'styled-components';\nimport { Button } from 'components/atoms';\n\nexport const SortButton = styled(Button)`\n  margin-right: 5px;\n`;\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { SortTypes } from 'constants/tasksConstants';\nimport { SortButton as SortButtonStyled } from './SortButton.styles';\n\nconst SortButtonTitles = {\n  [SortTypes.CREATE_TIME]: 'Sort by create-date',\n  [SortTypes.TITLE]: 'Sort by title',\n};\n\nexport const SortButton = ({ sortType, sortBy }) => {\n  // UseCallback is needed, since it uses an closure value\n  const onSortClick = useCallback(() => sortBy(sortType), [sortBy, sortType]);\n\n  return (\n    <SortButtonStyled className=\"yellow-button\" onClick={onSortClick}>\n      {SortButtonTitles[sortType]}\n    </SortButtonStyled>\n  );\n};\n\nSortButton.propTypes = {\n  sortType: PropTypes.string.isRequired,\n  sortBy: PropTypes.func.isRequired,\n};\n\nexport default SortButton;\n","import styled from 'styled-components';\n\nexport const Input = styled.input.attrs({ type: 'text' })`\n  border-radius: 1em;\n  border: 1px solid #656565;\n\n  padding: 2px 5px;\n`;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Input } from './TextInput.styles';\n\nconst TextInput = ({ value: initialValue, placeholder, onValueChange }) => {\n  const [value, setValue] = useState(initialValue);\n  // UseCallback is needed, since it uses an closure value\n  const handleTextInputChange = useCallback(\n    event => {\n      setValue(event.target.value);\n      onValueChange(event.target.value);\n    },\n    [onValueChange],\n  );\n\n  // allow rewriting title by parent: subscribe on its change\n  useEffect(() => setValue(initialValue), [initialValue]);\n\n  return <Input placeholder={placeholder} value={value} onChange={handleTextInputChange} />;\n};\n\nTextInput.defaultProps = {\n  value: '',\n  placeholder: '',\n};\n\nTextInput.propTypes = {\n  value: PropTypes.string,\n  placeholder: PropTypes.string,\n  onValueChange: PropTypes.func.isRequired,\n};\n\nexport default TextInput;\n","import React from 'react'\n\nconst Header = () => (<h1>Processes</h1>);\n\nexport default Header;","import styled from 'styled-components';\n\nexport const ListContainter = styled.ul`\n  margin-left: 10px;\n  margin-bottom: 5px;\n\n  .item {\n    margin-bottom: 5px;\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ListContainter } from './List.styles';\n\nconst List = ({ items, ItemComponent }) => (\n  <ListContainter>\n    {items.map(item => (\n      <li key={item.id}>\n        <ItemComponent {...item} />\n      </li>\n    ))}\n  </ListContainter>\n);\n\nconst ListItemShape = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n});\n\nList.propTypes = {\n  items: PropTypes.arrayOf(ListItemShape).isRequired,\n  ItemComponent: PropTypes.elementType.isRequired,\n};\n\nexport default List;\n","import styled from 'styled-components';\n\nexport const Checkbox = styled.input.attrs({ type: 'checkbox' })`\n  margin-right: 5px;\n`;\n","import React, { useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox as CheckboxStyled } from './Checkbox.styles';\n\nconst Checkbox = ({ onCheck, isUncheckable }) => {\n  const [isChecked, setChecked] = useState(false);\n\n  // UseCallback is needed, since it uses an closure value\n  const onCheckClick = useCallback(() => {\n    if (!isChecked) onCheck();\n    setChecked(checkedState => (isUncheckable ? true : !checkedState));\n  }, [onCheck, isChecked, isUncheckable]);\n\n  return <CheckboxStyled onChange={onCheckClick} checked={isChecked} />;\n};\n\nCheckbox.defaultProps = {\n  isUncheckable: false,\n};\n\nCheckbox.propTypes = {\n  onCheck: PropTypes.func.isRequired,\n  isUncheckable: PropTypes.bool,\n};\n\nexport default Checkbox;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { searchQuerySelector } from 'reducers/appReducer/selectors';\n\nconst MarkedText = ({ children: text }) => {\n  const searchQuery = useSelector(searchQuerySelector);\n  // splits keeping separator\n  const queryRegex = new RegExp(`(${searchQuery})`, 'gi');\n  const parts = text.split(queryRegex);\n\n  return searchQuery ? (\n    <>\n      {parts.map((part, index) => {\n        const isQueryPart = queryRegex.test(part);\n\n        return (\n          // The elements order will change only in case of new text\n          // eslint-disable-next-line react/no-array-index-key\n          <React.Fragment key={index}>{isQueryPart ? <mark>{part}</mark> : part}</React.Fragment>\n        );\n      })}\n    </>\n  ) : (\n    text\n  );\n};\n\nMarkedText.propTypes = {\n  children: PropTypes.string.isRequired,\n};\n\nexport default MarkedText;\n","import { useCallback } from 'react';\nimport { useSelector } from 'react-redux';\n\nexport const useParametrizedSelector = (parametrizedSelectorFactory, params) => {\n  // As we want to recreate selector only if refs to params themselves change\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const selector = useCallback(parametrizedSelectorFactory(...params), [\n    parametrizedSelectorFactory,\n    ...params,\n  ]);\n  // TODO: recreating selector on deps-changes kill memoized optimization of createSelector,\n  // as memo-cache is lost. Re-design parametrized selector approach to get full advantage of memoization\n\n  return useSelector(selector);\n};\n","import styled from 'styled-components';\n\nexport const ButtonContainer = styled.div`\n  margin: 5px 0;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { SortTypes } from 'constants/tasksConstants';\nimport { SortButton } from 'components/atoms';\nimport { ButtonContainer } from './SortTasksButtons.styles';\n\nconst SortTasksButtons = ({ sortBy }) => (\n  <ButtonContainer>\n    {Object.values(SortTypes).map(sortType => (\n      <SortButton key={sortType} sortBy={sortBy} sortType={sortType} />\n    ))}\n  </ButtonContainer>\n);\n\nSortTasksButtons.propTypes = {\n  sortBy: PropTypes.func.isRequired,\n};\n\nexport default SortTasksButtons;\n","import styled from 'styled-components';\nimport { Button } from 'components/atoms';\n\nexport const LabelStyled = styled(Button)`\n  padding: 0 5px;\n`;\n\nexport const LabelsListContainer = styled.ul`\n  margin: 3px 0 10px;\n\n  & > li {\n    display: inline-block;\n    margin-right: 5px;\n  }\n`;\n\nexport const LabelListItem = styled.li`\n  display: inline-block;\n  margin-right: 5px;\n`;\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { searchSubTasksByLabelAction } from 'reducers/subTasksReducer/actions';\nimport { LabelsListContainer, LabelStyled, LabelListItem } from './LabelsList.styles';\n\n// TODO: move to atoms\nconst Label = ({ label }) => {\n  const dispatch = useDispatch();\n  const handleClick = useCallback(\n    () => dispatch(searchSubTasksByLabelAction(label)),\n    [dispatch, label],\n  );\n\n  return (\n    <LabelStyled className=\"label purple-button\" onClick={handleClick}>\n      #{label}\n    </LabelStyled>\n  );\n};\n\nLabel.propTypes = {\n  label: PropTypes.string.isRequired,\n};\n\nconst LabelsList = ({ labels }) => (\n  <LabelsListContainer>\n    {labels.map(label => (\n      <LabelListItem key={label}>\n        <Label label={label} />\n      </LabelListItem>\n    ))}\n  </LabelsListContainer>\n);\n\nLabelsList.defaultProps = {\n  labels: [],\n};\n\nLabelsList.propTypes = {\n  labels: PropTypes.arrayOf(PropTypes.string),\n};\n\nexport default LabelsList;\n","import React, { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Checkbox as RemoveTaskCheckbox, MarkedText } from 'components/atoms';\nimport { LabelsList } from 'components/molecules';\nimport { subTaskDeleteAction } from 'reducers/subTasksReducer/actions';\n\nconst SubTask = ({ id, title, labels, taskId }) => {\n  const dispatch = useDispatch();\n  const onRemoveClick = useCallback(\n    () => dispatch(subTaskDeleteAction({ id, taskId })),\n    [dispatch, id, taskId],\n  );\n\n  return (\n    <span>\n      <RemoveTaskCheckbox onCheck={onRemoveClick} isUncheckable />\n      <span id={id}>\n        <MarkedText>{title}</MarkedText>\n      </span>\n      <LabelsList labels={labels} />\n    </span>\n  );\n};\n\nSubTask.defaultProps = {\n  labels: [],\n};\n\nexport const SubTaskShape = {\n  id: PropTypes.string.isRequired,\n  taskId: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  labels: PropTypes.arrayOf(PropTypes.string),\n};\n\nSubTask.propTypes = SubTaskShape;\n\nexport default SubTask;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { visibleSubTasksByTaskIdSelectorFactory } from 'reducers/subTasksReducer/selectors';\nimport { useParametrizedSelector } from 'components/hooks/useParametrizedSelector';\nimport { List } from 'components/atoms';\nimport SubTask from 'components/molecules/SubTask/SubTask';\n\nconst SubTasksList = ({ taskId }) => {\n  const subTasks = useParametrizedSelector(visibleSubTasksByTaskIdSelectorFactory, [taskId]);\n\n  return <List items={subTasks} ItemComponent={SubTask} />;\n};\n\nSubTasksList.propTypes = {\n  taskId: PropTypes.string.isRequired,\n};\n\nexport default SubTasksList;\n","export const formatTimeForRender = timeInMilliseconds => {\n  const date = new Date(timeInMilliseconds);\n\n  return `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;\n};\n\nconst isAnySubTaskOfTask = (subTasks, taskId) =>\n  subTasks.find(subTask => subTask.taskId === taskId);\n\n// TODO: Consider using lodash for such operations\nconst searchByProp = (array, searchItem, property) =>\n  array.find(item => item[property] === searchItem[property]);\n\nexport const getFoundTasks = (allTasks, subTasks, foundTasks) => {\n  const isFoundTask = task => searchByProp(foundTasks, task, 'id');\n\n  return allTasks.filter(task => isFoundTask(task.id) || isAnySubTaskOfTask(subTasks, task.id));\n};\n","import styled from 'styled-components';\n\nexport const TaskWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const TaskName = styled.span`\n  flex-basis: 40%;\n  max-width: 40%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { Button, MarkedText } from 'components/atoms';\nimport { subTasksFetchAction } from 'reducers/subTasksReducer/actions';\nimport SubTasksList from 'components/organisms/SubTasksList/SubTasksList';\nimport { formatTimeForRender } from 'helpers/tasksHelpers';\nimport { TaskWrapper, TaskName } from './Task.styles';\n\nconst Task = ({ title, id, createTime }) => {\n  const dispatch = useDispatch();\n  const onViewSubtasksClick = useCallback(() => dispatch(subTasksFetchAction(id)), [id, dispatch]);\n\n  return (\n    <>\n      <TaskWrapper>\n        <TaskName>\n          <MarkedText>{title}</MarkedText>\n        </TaskName>\n        <span>{formatTimeForRender(createTime)}</span>\n        <Button onClick={onViewSubtasksClick}>Expand</Button>\n      </TaskWrapper>\n      <SubTasksList taskId={id} />\n    </>\n  );\n};\n\nexport const TaskShape = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  createTime: PropTypes.number.isRequired,\n};\n\nTask.propTypes = TaskShape;\n\nexport default Task;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { isSearchModeSelector } from 'reducers/appReducer/selectors';\nimport { foundSubTasksSelector } from 'reducers/subTasksReducer/selectors';\nimport { getFoundTasks } from 'helpers/tasksHelpers';\n\nexport const tasksListSelector = state => state.tasks.tasksList;\n\nexport const tasksByIdSelector = (state, taskId) =>\n  state.tasks.tasksList.find(task => task.id === taskId);\n\nexport const foundTasksSelector = state => state.tasks.foundTasksList;\n\nexport const visibleTasksSelector = createSelector(\n  isSearchModeSelector,\n  tasksListSelector,\n  foundTasksSelector,\n  foundSubTasksSelector,\n  (isSearchMode, tasksList, foundTasksList, foundSubTasks) =>\n    isSearchMode\n      ? // TODO: consider optimization of heavy operation below\n        getFoundTasks(tasksList, foundSubTasks, foundTasksList)\n      : tasksList,\n);\n","import { useState } from 'react';\nimport { SortTypes } from 'constants/tasksConstants';\n\nconst comparatorsBySortType = {\n  [SortTypes.CREATE_TIME]: (a, b) => a.createTime - b.createTime,\n  [SortTypes.TITLE]: (a, b) => (a.title < b.title ? -1 : 1),\n};\n\nconst sortItemsImmutably = (items, sortType) => {\n  const sortedItems = [...items];\n\n  sortedItems.sort(comparatorsBySortType[sortType]);\n\n  return sortedItems;\n};\n\nconst useSorting = items => {\n  const [sortType, setSortType] = useState(SortTypes.CREATE_TIME);\n  const sortedItems = sortItemsImmutably(items, sortType);\n\n  return { sortedItems, sortBy: setSortType };\n};\n\nexport default useSorting;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Task from 'components/organisms/Task/Task';\nimport { List } from 'components/atoms';\nimport { SortTasksButtons } from 'components/molecules';\nimport { visibleTasksSelector } from 'reducers/tasksReducer/selectors';\nimport useSorting from './hooks/useSorting';\n\nconst TasksList = () => {\n  const tasks = useSelector(visibleTasksSelector);\n  const { sortedItems, sortBy } = useSorting(tasks);\n\n  return (\n    <section>\n      <SortTasksButtons sortBy={sortBy} />\n      <List items={sortedItems} ItemComponent={Task} />\n    </section>\n  );\n};\n\nexport default TasksList;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { subTaskFiltersSelector } from 'reducers/subTasksReducer/selectors';\nimport { LabelsList } from 'components/molecules';\n\nconst FiltersPanel = () => {\n  const filters = useSelector(subTaskFiltersSelector);\n\n  return (\n    <div>\n      <LabelsList labels={filters} />\n    </div>\n  );\n};\n\nexport default FiltersPanel;\n","import styled from 'styled-components';\n\nexport const TaskFormContainer = styled.section`\n  & button {\n    margin-left: 5px;\n  }\n`;\n","import React, { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Button, TextInput } from 'components/atoms';\nimport { FiltersPanel } from 'components/organisms';\nimport { taskCreateAction } from 'reducers/tasksReducer/actions';\nimport { setAppModeAction, searchItemsAction } from 'reducers/appReducer/actions';\nimport { isSearchModeSelector } from 'reducers/appReducer/selectors';\nimport { TaskFormContainer } from './TaskForm.styles';\n\n// TODO: split into organisms\nconst TaskForm = ({ title: initialTitle }) => {\n  const [title, setTitle] = useState(initialTitle);\n  const dispatch = useDispatch();\n  const isSearchMode = useSelector(isSearchModeSelector);\n  const onCreate = useCallback(() => {\n    dispatch(taskCreateAction({ title }));\n    setTitle('');\n  }, [title, dispatch]);\n\n  const onToggleSearchMode = useCallback(() => {\n    // Clear inbox on leaving search-mode\n    if (isSearchMode) {\n      setTitle('');\n    } else {\n      dispatch(searchItemsAction(title));\n    }\n\n    dispatch(setAppModeAction(!isSearchMode));\n  }, [dispatch, isSearchMode, title]);\n\n  const onTitleChange = useCallback(\n    value => {\n      setTitle(value);\n      // TODO: too many if-s => consider to split the component into two\n      if (isSearchMode) dispatch(searchItemsAction(value));\n    },\n    [isSearchMode, dispatch],\n  );\n\n  return (\n    <TaskFormContainer>\n      <TextInput value={title} placeholder=\"task title\" onValueChange={onTitleChange} />\n      {!isSearchMode && <Button onClick={onCreate}>Create</Button>}\n      <Button onClick={onToggleSearchMode}>{isSearchMode ? 'Exit Search' : 'Start Search'}</Button>\n      <FiltersPanel />\n    </TaskFormContainer>\n  );\n};\n\nTaskForm.defaultProps = {\n  title: '',\n};\n\nTaskForm.propTypes = {\n  title: PropTypes.string,\n};\n\nexport default TaskForm;\n","import React from 'react';\nimport { TaskList } from 'components/organisms';\nimport PageHeader from 'components/atoms/PageHeader/PageHeader';\nimport TaskForm from 'components/organisms/TaskForm/TaskForm';\n\nconst TasksPage = () => (\n  <>\n    <PageHeader />\n    <main>\n      <TaskForm />\n      <TaskList />\n    </main>\n  </>\n);\n\nexport default TasksPage;\n","import React from 'react'\nimport { DefaultTemplate } from 'components/templates'\nimport { Tasks } from 'modules'\n\nconst Home = () => (\n  <DefaultTemplate>\n    <Tasks />\n  </DefaultTemplate>\n)\n\nexport default Home\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { DefaultTemplate } from 'components/templates'\nimport { routes } from 'config/routes'\n\nconst NotFound = () => (\n  <DefaultTemplate>\n    <h1>Page not found</h1>\n    <Link to={routes.root()}>Go to home</Link>\n  </DefaultTemplate>\n)\n\nexport default NotFound\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport { routes } from 'config/routes'\nimport Home from './Home/Home'\nimport NotFound from './NotFound/NotFound'\n\nconst Routes = () => (\n  <Switch>\n    <Route path={routes.root()} component={Home} />\n    <Route component={NotFound} />\n  </Switch>\n)\n\nexport default Routes\n","import { createGlobalStyle } from 'styled-components'\n\nexport default createGlobalStyle`\n  * {\n    padding: 0;\n    margin: 0;\n    outline: none;\n\n    &,\n    &:before,\n    &:after {\n      box-sizing: border-box;\n    }\n  }\n\n  body {\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    font-family: 'Helvetica', sans-serif;\n    font-weight: 400;\n    font-size: 14px;\n    line-height: 1.4;\n  }\n\n  a {\n    text-decoration: none;\n\n    &,\n    &:hover {\n      color: inherit;\n    }\n  }\n\n  p {\n    margin: 0;\n  }\n\n  ul,\n  ol {\n    margin: 0;\n    list-style: none;\n  }\n\n  img {\n    max-width: 100%;\n  }\n\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    margin: 0;\n  }\n\n  pre {\n    margin: 0;\n  }\n\n  #root {\n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n  }\n`\n","import React, { useEffect } from 'react';\nimport { Provider } from 'react-redux'\nimport { ConnectedRouter } from 'connected-react-router'\nimport store, { history } from 'store'\nimport Routes from 'routes'\nimport GlobalStyle from './styles';\n\nconst App = () => {\n  useEffect(() => {\n    store.dispatch({ type: 'app/init' });\n  }, []);\n\n  return (<>\n    <GlobalStyle />\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <Routes />\n      </ConnectedRouter>\n    </Provider>\n  </>);\n};\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nwindow.logError = alert; // for debugging via Cloud9\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}